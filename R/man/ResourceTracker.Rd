% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/zzz.R
\name{ResourceTracker}
\alias{ResourceTracker}
\title{Track resource usage of processes and the system in a non-blocking way.}
\usage{
ResourceTracker(
    pid = Sys.getpid(),
    children = TRUE,
    interval = 1,
    method = NULL,
    autostart = TRUE,
    track_processes = TRUE,
    track_system = TRUE,
    discover_server = TRUE,
    discover_cloud = TRUE
)
}
\arguments{
\item{pid}{The process ID to track. Defaults to current process ID.}

\item{children}{Whether to track child processes. Defaults to True.}

\item{interval}{Sampling interval in seconds. Defaults to 1.}

\item{method}{Multiprocessing method. Defaults to None, which tries to fork on Linux and macOS, and spawn on Windows.}

\item{autostart}{Whether to start tracking immediately. Defaults to True.}

\item{track_processes}{Whether to track resource usage at the process level. Defaults to True.}

\item{track_system}{Whether to track system-wide resource usage. Defaults to True.}

\item{discover_server}{Whether to discover the server specs in the background at startup. Defaults to True.}

\item{discover_cloud}{Whether to discover the cloud environment in the background at startup. Defaults to True.}
}
\value{
A \code{ResourceTracker} Python object.
}
\description{
This is a wrapper around the \code{resource_tracker} Python module's
\code{ResourceTracker} class, which is automatically starting background
processes to track the resource usage of processes and the system in
temporary CSV files, made available for analysis and reporting directly from
R.
}
\details{
Resource tracker lifecycle methods:
\itemize{
\item \code{start}: Start the resource usage trackers. This is automatically called when the \code{ResourceTracker} object is created with the default \code{autostart} flag.
\item \code{stop}: Stop tracking resource usage.
\item \code{wait_for_samples}: Wait for a certain number of samples to be collected.
}

Resource tracker analysis methods:
\itemize{
\item \code{get_combined_metrics}: Get the system and process metrics joined by timestamp into a single \code{data.frame}.
\item \code{stats}: Get statistics of the resource usage, including the mean and max of the metrics, and the duration of the tracking.
\item \code{recommend_resources}: Recommend resources (vCPUs, memory, GPUs, and VRAM) based on the current state of the resource tracker.
\item \code{recommend_server}: Recommend the cheapest cloud server that can run the recommended resources (vCPUs, memory, GPUs, and VRAM) based on the current state of the resource tracker.
\item \code{report}: Generate an interactive HTML report of the resource usage and recommendations.
}

Utility methods:
\itemize{
\item \code{snapshot}: Serialize the current state of the resource tracker as a list.
\item \code{from_snapshot}: Load a snapshot of the resource tracker.
\item \code{dumps}: Serialize the resource tracker object to a JSON blob.
\item \code{loads}: Load a JSON blob representation of the resource tracker object.
\item \code{dump}: Serialize the resource tracker object to a gzipped file.
\item \code{load}: Load a gzipped file representation of the resource tracker object.
}

Resource tracker properties:
\itemize{
\item \code{n_samples}: Number of samples collected.
\item \code{server_info}: Discovered server information, including the operating system, number of vCPUs, memory amount, GPUs and VRAM, and a guess if the server is dedicated to the tracked process(es) or shared with other processes.
\item \code{cloud_info}: Discovered cloud information, including the cloud provider, instance type, and the datacenter region.
\item \code{process_metrics}: Collected process metrics as a \code{data.frame}, including timestamp, CPU usage, memory usage, GPU and VRAM utilization, and disk usage.
\item \code{system_metrics}: Collected system metrics as a \code{data.frame}, including timestamp, CPU usage, memory used and available, GPU and VRAM used, disk space, and network receive and send bytes.
\item \code{running}: Whether the resource usage trackers are still running.
\item \code{wait_for_samples}: Wait for a certain number of samples to be collected.
}

For more details, consult the Python documentation via

\if{html}{\out{<div class="sourceCode">}}\preformatted{reticulate::py_help(ResourceTracker)
}\if{html}{\out{</div>}}
}
\examples{
\dontrun{
tracker <- ResourceTracker()
tracker$start()

start <- Sys.time()
while (Sys.time() - start < 3) {
  mean(runif(1e6))
}

tracker$stop()
tracker$recommend_resources()
tracker$recommend_server()

report <- tracker$report()
report$browse()
}
}
